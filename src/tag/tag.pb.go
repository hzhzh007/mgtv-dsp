// Code generated by protoc-gen-go.
// source: tag.proto
// DO NOT EDIT!

/*
Package tag is a generated protocol buffer package.

It is generated from these files:
	tag.proto

It has these top-level messages:
	UserId
	User
	Tag
	UserTag
*/
package tag

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UserId struct {
	Type  string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *UserId) Reset()                    { *m = UserId{} }
func (m *UserId) String() string            { return proto.CompactTextString(m) }
func (*UserId) ProtoMessage()               {}
func (*UserId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type User struct {
	Uids []*UserId `protobuf:"bytes,1,rep,name=uids" json:"uids,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *User) GetUids() []*UserId {
	if m != nil {
		return m.Uids
	}
	return nil
}

type Tag struct {
	Id         uint64 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Name       string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	UpdateTime int32  `protobuf:"varint,3,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
}

func (m *Tag) Reset()                    { *m = Tag{} }
func (m *Tag) String() string            { return proto.CompactTextString(m) }
func (*Tag) ProtoMessage()               {}
func (*Tag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type UserTag struct {
	Tags []*Tag `protobuf:"bytes,1,rep,name=tags" json:"tags,omitempty"`
}

func (m *UserTag) Reset()                    { *m = UserTag{} }
func (m *UserTag) String() string            { return proto.CompactTextString(m) }
func (*UserTag) ProtoMessage()               {}
func (*UserTag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UserTag) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func init() {
	proto.RegisterType((*UserId)(nil), "tag.UserId")
	proto.RegisterType((*User)(nil), "tag.User")
	proto.RegisterType((*Tag)(nil), "tag.Tag")
	proto.RegisterType((*UserTag)(nil), "tag.UserTag")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for Tags service

type TagsClient interface {
	GetUserTags(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserTag, error)
}

type tagsClient struct {
	cc *grpc.ClientConn
}

func NewTagsClient(cc *grpc.ClientConn) TagsClient {
	return &tagsClient{cc}
}

func (c *tagsClient) GetUserTags(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserTag, error) {
	out := new(UserTag)
	err := grpc.Invoke(ctx, "/tag.Tags/GetUserTags", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Tags service

type TagsServer interface {
	GetUserTags(context.Context, *User) (*UserTag, error)
}

func RegisterTagsServer(s *grpc.Server, srv TagsServer) {
	s.RegisterService(&_Tags_serviceDesc, srv)
}

func _Tags_GetUserTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagsServer).GetUserTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tag.Tags/GetUserTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagsServer).GetUserTags(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tags_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tag.Tags",
	HandlerType: (*TagsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserTags",
			Handler:    _Tags_GetUserTags_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

func init() { proto.RegisterFile("tag.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 215 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x3c, 0x90, 0x41, 0x4b, 0xc4, 0x30,
	0x10, 0x85, 0x69, 0x9b, 0x5d, 0xed, 0x54, 0x3c, 0x0c, 0x1e, 0x82, 0x08, 0x5b, 0x7a, 0xd0, 0x9e,
	0x7a, 0xa8, 0x3f, 0x42, 0xf4, 0x18, 0xe2, 0x59, 0x46, 0x12, 0x42, 0xc0, 0xba, 0xa5, 0x99, 0x0a,
	0xfe, 0x7b, 0xc9, 0xd4, 0xed, 0xed, 0xe5, 0x85, 0xf7, 0x7d, 0x21, 0x50, 0x33, 0x85, 0x61, 0x5e,
	0xce, 0x7c, 0xc6, 0x8a, 0x29, 0x74, 0x23, 0x1c, 0xdf, 0x93, 0x5f, 0x5e, 0x1d, 0x22, 0x28, 0xfe,
	0x9d, 0xbd, 0x2e, 0xda, 0xa2, 0xaf, 0x8d, 0x64, 0xbc, 0x83, 0xc3, 0x0f, 0x7d, 0xad, 0x5e, 0x97,
	0x52, 0x6e, 0x87, 0xee, 0x09, 0x54, 0xde, 0xe0, 0x09, 0xd4, 0x1a, 0x5d, 0xd2, 0x45, 0x5b, 0xf5,
	0xcd, 0xd8, 0x0c, 0x19, 0xbd, 0xc1, 0x8c, 0x5c, 0x74, 0x6f, 0x50, 0x59, 0x0a, 0x78, 0x0b, 0x65,
	0x74, 0x82, 0x50, 0xa6, 0x8c, 0x62, 0xfa, 0xa6, 0x69, 0x37, 0xe5, 0x8c, 0x27, 0x68, 0xd6, 0xd9,
	0x11, 0xfb, 0x0f, 0x8e, 0x93, 0xd7, 0x55, 0x5b, 0xf4, 0x07, 0x03, 0x5b, 0x65, 0xe3, 0x94, 0xa5,
	0x57, 0x99, 0x9d, 0x79, 0x0f, 0xa0, 0x98, 0xc2, 0xc5, 0x7b, 0x2d, 0x5e, 0x4b, 0xc1, 0x48, 0x3b,
	0x0e, 0xa0, 0x2c, 0x85, 0x84, 0x8f, 0xd0, 0xbc, 0x78, 0xfe, 0xdf, 0x24, 0xac, 0xf7, 0xe7, 0xdd,
	0xdf, 0xec, 0xd1, 0x52, 0xf8, 0x3c, 0xca, 0x6f, 0x3c, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x1f,
	0x53, 0xde, 0x1d, 0x1a, 0x01, 0x00, 0x00,
}
